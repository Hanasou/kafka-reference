/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package example.todo;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ToDo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8297602027927330652L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ToDo\",\"namespace\":\"example.todo\",\"fields\":[{\"name\":\"task\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"assignee\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"duration\",\"type\":\"int\"},{\"name\":\"creationTimestamp\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ToDo> ENCODER =
      new BinaryMessageEncoder<ToDo>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ToDo> DECODER =
      new BinaryMessageDecoder<ToDo>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ToDo> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ToDo> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ToDo> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ToDo>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ToDo to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ToDo from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ToDo instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ToDo fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String task;
   private java.lang.String assignee;
   private int duration;
   private long creationTimestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ToDo() {}

  /**
   * All-args constructor.
   * @param task The new value for task
   * @param assignee The new value for assignee
   * @param duration The new value for duration
   * @param creationTimestamp The new value for creationTimestamp
   */
  public ToDo(java.lang.String task, java.lang.String assignee, java.lang.Integer duration, java.lang.Long creationTimestamp) {
    this.task = task;
    this.assignee = assignee;
    this.duration = duration;
    this.creationTimestamp = creationTimestamp;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return task;
    case 1: return assignee;
    case 2: return duration;
    case 3: return creationTimestamp;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: task = value$ != null ? value$.toString() : null; break;
    case 1: assignee = value$ != null ? value$.toString() : null; break;
    case 2: duration = (java.lang.Integer)value$; break;
    case 3: creationTimestamp = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'task' field.
   * @return The value of the 'task' field.
   */
  public java.lang.String getTask() {
    return task;
  }



  /**
   * Gets the value of the 'assignee' field.
   * @return The value of the 'assignee' field.
   */
  public java.lang.String getAssignee() {
    return assignee;
  }



  /**
   * Gets the value of the 'duration' field.
   * @return The value of the 'duration' field.
   */
  public int getDuration() {
    return duration;
  }



  /**
   * Gets the value of the 'creationTimestamp' field.
   * @return The value of the 'creationTimestamp' field.
   */
  public long getCreationTimestamp() {
    return creationTimestamp;
  }



  /**
   * Creates a new ToDo RecordBuilder.
   * @return A new ToDo RecordBuilder
   */
  public static example.todo.ToDo.Builder newBuilder() {
    return new example.todo.ToDo.Builder();
  }

  /**
   * Creates a new ToDo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ToDo RecordBuilder
   */
  public static example.todo.ToDo.Builder newBuilder(example.todo.ToDo.Builder other) {
    if (other == null) {
      return new example.todo.ToDo.Builder();
    } else {
      return new example.todo.ToDo.Builder(other);
    }
  }

  /**
   * Creates a new ToDo RecordBuilder by copying an existing ToDo instance.
   * @param other The existing instance to copy.
   * @return A new ToDo RecordBuilder
   */
  public static example.todo.ToDo.Builder newBuilder(example.todo.ToDo other) {
    if (other == null) {
      return new example.todo.ToDo.Builder();
    } else {
      return new example.todo.ToDo.Builder(other);
    }
  }

  /**
   * RecordBuilder for ToDo instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ToDo>
    implements org.apache.avro.data.RecordBuilder<ToDo> {

    private java.lang.String task;
    private java.lang.String assignee;
    private int duration;
    private long creationTimestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(example.todo.ToDo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.task)) {
        this.task = data().deepCopy(fields()[0].schema(), other.task);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.assignee)) {
        this.assignee = data().deepCopy(fields()[1].schema(), other.assignee);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.duration)) {
        this.duration = data().deepCopy(fields()[2].schema(), other.duration);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.creationTimestamp)) {
        this.creationTimestamp = data().deepCopy(fields()[3].schema(), other.creationTimestamp);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing ToDo instance
     * @param other The existing instance to copy.
     */
    private Builder(example.todo.ToDo other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.task)) {
        this.task = data().deepCopy(fields()[0].schema(), other.task);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.assignee)) {
        this.assignee = data().deepCopy(fields()[1].schema(), other.assignee);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.duration)) {
        this.duration = data().deepCopy(fields()[2].schema(), other.duration);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.creationTimestamp)) {
        this.creationTimestamp = data().deepCopy(fields()[3].schema(), other.creationTimestamp);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'task' field.
      * @return The value.
      */
    public java.lang.String getTask() {
      return task;
    }


    /**
      * Sets the value of the 'task' field.
      * @param value The value of 'task'.
      * @return This builder.
      */
    public example.todo.ToDo.Builder setTask(java.lang.String value) {
      validate(fields()[0], value);
      this.task = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'task' field has been set.
      * @return True if the 'task' field has been set, false otherwise.
      */
    public boolean hasTask() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'task' field.
      * @return This builder.
      */
    public example.todo.ToDo.Builder clearTask() {
      task = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'assignee' field.
      * @return The value.
      */
    public java.lang.String getAssignee() {
      return assignee;
    }


    /**
      * Sets the value of the 'assignee' field.
      * @param value The value of 'assignee'.
      * @return This builder.
      */
    public example.todo.ToDo.Builder setAssignee(java.lang.String value) {
      validate(fields()[1], value);
      this.assignee = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'assignee' field has been set.
      * @return True if the 'assignee' field has been set, false otherwise.
      */
    public boolean hasAssignee() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'assignee' field.
      * @return This builder.
      */
    public example.todo.ToDo.Builder clearAssignee() {
      assignee = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'duration' field.
      * @return The value.
      */
    public int getDuration() {
      return duration;
    }


    /**
      * Sets the value of the 'duration' field.
      * @param value The value of 'duration'.
      * @return This builder.
      */
    public example.todo.ToDo.Builder setDuration(int value) {
      validate(fields()[2], value);
      this.duration = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'duration' field has been set.
      * @return True if the 'duration' field has been set, false otherwise.
      */
    public boolean hasDuration() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'duration' field.
      * @return This builder.
      */
    public example.todo.ToDo.Builder clearDuration() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'creationTimestamp' field.
      * @return The value.
      */
    public long getCreationTimestamp() {
      return creationTimestamp;
    }


    /**
      * Sets the value of the 'creationTimestamp' field.
      * @param value The value of 'creationTimestamp'.
      * @return This builder.
      */
    public example.todo.ToDo.Builder setCreationTimestamp(long value) {
      validate(fields()[3], value);
      this.creationTimestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'creationTimestamp' field has been set.
      * @return True if the 'creationTimestamp' field has been set, false otherwise.
      */
    public boolean hasCreationTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'creationTimestamp' field.
      * @return This builder.
      */
    public example.todo.ToDo.Builder clearCreationTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ToDo build() {
      try {
        ToDo record = new ToDo();
        record.task = fieldSetFlags()[0] ? this.task : (java.lang.String) defaultValue(fields()[0]);
        record.assignee = fieldSetFlags()[1] ? this.assignee : (java.lang.String) defaultValue(fields()[1]);
        record.duration = fieldSetFlags()[2] ? this.duration : (java.lang.Integer) defaultValue(fields()[2]);
        record.creationTimestamp = fieldSetFlags()[3] ? this.creationTimestamp : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ToDo>
    WRITER$ = (org.apache.avro.io.DatumWriter<ToDo>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ToDo>
    READER$ = (org.apache.avro.io.DatumReader<ToDo>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.task);

    out.writeString(this.assignee);

    out.writeInt(this.duration);

    out.writeLong(this.creationTimestamp);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.task = in.readString();

      this.assignee = in.readString();

      this.duration = in.readInt();

      this.creationTimestamp = in.readLong();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.task = in.readString();
          break;

        case 1:
          this.assignee = in.readString();
          break;

        case 2:
          this.duration = in.readInt();
          break;

        case 3:
          this.creationTimestamp = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










